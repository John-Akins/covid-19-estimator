{"version":3,"sources":["../../../src/utilities/appUtilities.js"],"names":["sampleData","region","name","avgAge","avgDailyIncomeInUSD","avgDailyIncomePopulation","periodType","timeToElapse","reportedCases","population","totalHospitalBeds","compareObjectKeys","a","b","aKeys","Object","keys","sort","bKeys","JSON","stringify","compareObjectKeysValueTypes","aValues","values","bValues","aTypes","bTypes","forEach","value","concat","validateTypesForValues","data","sample","validateInput","equalKeys","valueTypesValid","regionValueTypesValid","succes","message"],"mappings":"AAAA,MAAMA,aAAa;AACjBC,UAAQ;AACNC,UAAM,QADA;AAENC,YAAQ,IAFF;AAGNC,yBAAqB,CAHf;AAINC,8BAA0B;AAJpB,GADS;AAOjBC,cAAY,MAPK;AAQjBC,gBAAc,EARG;AASjBC,iBAAe,GATE;AAUjBC,cAAY,QAVK;AAWjBC,qBAAmB;AAXF,CAAnB;;AAcA,MAAMC,oBAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAMC,QAAQC,OAAOC,IAAP,CAAYJ,CAAZ,EAAeK,IAAf,EAAd;AACA,QAAMC,QAAQH,OAAOC,IAAP,CAAYH,CAAZ,EAAeI,IAAf,EAAd;AACA,SAAOE,KAAKC,SAAL,CAAeN,KAAf,MAA0BK,KAAKC,SAAL,CAAeF,KAAf,CAAjC;AACD,CAJD;;AAMA,MAAMG,8BAA8B,CAACT,CAAD,EAAIC,CAAJ,KAAU;AAC5C,QAAMS,UAAUP,OAAOQ,MAAP,CAAcX,CAAd,EAAiBK,IAAjB,EAAhB;AACA,QAAMO,UAAUT,OAAOQ,MAAP,CAAcV,CAAd,EAAiBI,IAAjB,EAAhB;;AAEA,MAAIQ,SAAS,EAAb;AACA,MAAIC,SAAS,EAAb;;AAEAJ,UAAQK,OAAR,CAAiBC,KAAD,IAAW;AACzBH,aAASA,OAAOI,MAAP,CAAc,OAAOD,KAArB,CAAT;AACD,GAFD;AAGAJ,UAAQG,OAAR,CAAiBC,KAAD,IAAW;AACzBF,aAASA,OAAOG,MAAP,CAAc,OAAOD,KAArB,CAAT;AACD,GAFD;AAGA,SAAOH,WAAWC,MAAlB;AACD,CAdD;;AAgBA,MAAMI,yBAAyB,CAACC,IAAD,EAAOC,MAAP,KAAkBX,4BAA4BU,IAA5B,EAAkCC,MAAlC,CAAjD;;AAGA,eAAe;AACbC,iBAAgBF,IAAD,IAAU;AACvB,UAAMG,YAAYvB,kBAAkBoB,IAAlB,EAAwB/B,UAAxB,CAAlB;AACA,UAAMmC,kBAAkBL,uBAAuBC,IAAvB,EAA6B/B,UAA7B,CAAxB;AACA,UAAMoC,wBAAwBN,uBAAuBC,KAAK9B,MAA5B,EAAoCD,WAAWC,MAA/C,CAA9B;;AAEA,QAAI,CAACiC,SAAL,EAAgB;AACd,aAAO,EAAEG,QAAQ,KAAV,EAAiBC,SAAS,yBAA1B,EAAP;AACD,KAAC,IAAI,EAAEH,mBAAmBC,qBAArB,CAAJ,EAAiD;AACjD,aAAO,EAAEC,QAAQ,KAAV,EAAiBC,SAAS,6BAA1B,EAAP;AACD;;AAED,WAAO,EAAED,QAAQH,aAAaC,eAAvB,EAAP;AACD;AAbY,CAAf","file":"appUtilities.js","sourcesContent":["const sampleData = {\n  region: {\n    name: 'Africa',\n    avgAge: 19.7,\n    avgDailyIncomeInUSD: 5,\n    avgDailyIncomePopulation: 0.71\n  },\n  periodType: 'days',\n  timeToElapse: 58,\n  reportedCases: 674,\n  population: 66622705,\n  totalHospitalBeds: 1380614\n};\n\nconst compareObjectKeys = (a, b) => {\n  const aKeys = Object.keys(a).sort();\n  const bKeys = Object.keys(b).sort();\n  return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n};\n\nconst compareObjectKeysValueTypes = (a, b) => {\n  const aValues = Object.values(a).sort();\n  const bValues = Object.values(b).sort();\n\n  let aTypes = '';\n  let bTypes = '';\n\n  aValues.forEach((value) => {\n    aTypes = aTypes.concat(typeof value);\n  });\n  bValues.forEach((value) => {\n    bTypes = bTypes.concat(typeof value);\n  });\n  return aTypes === bTypes;\n};\n\nconst validateTypesForValues = (data, sample) => compareObjectKeysValueTypes(data, sample);\n\n\nexport default {\n  validateInput: (data) => {\n    const equalKeys = compareObjectKeys(data, sampleData);\n    const valueTypesValid = validateTypesForValues(data, sampleData);\n    const regionValueTypesValid = validateTypesForValues(data.region, sampleData.region);\n\n    if (!equalKeys) {\n      return { succes: false, message: 'Invalid Inputs Provided' };\n    } if (!(valueTypesValid && regionValueTypesValid)) {\n      return { succes: false, message: 'Invalid data types provided' };\n    }\n\n    return { succes: equalKeys && valueTypesValid };\n  }\n};\n"]}