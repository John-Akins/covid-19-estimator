{"version":3,"sources":["../../../src/utilities/appUtilities.js"],"names":["sampleData","region","name","avgAge","avgDailyIncomeInUSD","avgDailyIncomePopulation","periodType","timeToElapse","reportedCases","population","totalHospitalBeds","compareObjectKeys","a","b","aKeys","Object","keys","sort","bKeys","JSON","stringify","compareObjectKeysValueTypes","aValues","values","bValues","aTypes","bTypes","forEach","value","concat","validateTypesForValues","data","sample","validateInput","equalKeys","valueTypesValid","regionValueTypesValid","succes","message"],"mappings":";;;;;;AAAA,MAAMA,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,QADA;AAENC,IAAAA,MAAM,EAAE,IAFF;AAGNC,IAAAA,mBAAmB,EAAE,CAHf;AAINC,IAAAA,wBAAwB,EAAE;AAJpB,GADS;AAOjBC,EAAAA,UAAU,EAAE,MAPK;AAQjBC,EAAAA,YAAY,EAAE,EARG;AASjBC,EAAAA,aAAa,EAAE,GATE;AAUjBC,EAAAA,UAAU,EAAE,QAVK;AAWjBC,EAAAA,iBAAiB,EAAE;AAXF,CAAnB;;AAcA,MAAMC,iBAAiB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYJ,CAAZ,EAAeK,IAAf,EAAd;AACA,QAAMC,KAAK,GAAGH,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeI,IAAf,EAAd;AACA,SAAOE,IAAI,CAACC,SAAL,CAAeN,KAAf,MAA0BK,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAjC;AACD,CAJD;;AAMA,MAAMG,2BAA2B,GAAG,CAACT,CAAD,EAAIC,CAAJ,KAAU;AAC5C,QAAMS,OAAO,GAAGP,MAAM,CAACQ,MAAP,CAAcX,CAAd,EAAiBK,IAAjB,EAAhB;AACA,QAAMO,OAAO,GAAGT,MAAM,CAACQ,MAAP,CAAcV,CAAd,EAAiBI,IAAjB,EAAhB;AAEA,MAAIQ,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AAEAJ,EAAAA,OAAO,CAACK,OAAR,CAAiBC,KAAD,IAAW;AACzBH,IAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAc,OAAOD,KAArB,CAAT;AACD,GAFD;AAGAJ,EAAAA,OAAO,CAACG,OAAR,CAAiBC,KAAD,IAAW;AACzBF,IAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAc,OAAOD,KAArB,CAAT;AACD,GAFD;AAGA,SAAOH,MAAM,KAAKC,MAAlB;AACD,CAdD;;AAgBA,MAAMI,sBAAsB,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkBX,2BAA2B,CAACU,IAAD,EAAOC,MAAP,CAA5E;;eAGe;AACbC,EAAAA,aAAa,EAAGF,IAAD,IAAU;AACvB,UAAMG,SAAS,GAAGvB,iBAAiB,CAACoB,IAAD,EAAO/B,UAAP,CAAnC;AACA,UAAMmC,eAAe,GAAGL,sBAAsB,CAACC,IAAD,EAAO/B,UAAP,CAA9C;AACA,UAAMoC,qBAAqB,GAAGN,sBAAsB,CAACC,IAAI,CAAC9B,MAAN,EAAcD,UAAU,CAACC,MAAzB,CAApD;;AAEA,QAAI,CAACiC,SAAL,EAAgB;AACd,aAAO;AAAEG,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;AACD;;AAAC,QAAI,EAAEH,eAAe,IAAIC,qBAArB,CAAJ,EAAiD;AACjD,aAAO;AAAEC,QAAAA,MAAM,EAAE,KAAV;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;AACD;;AAED,WAAO;AAAED,MAAAA,MAAM,EAAEH,SAAS,IAAIC;AAAvB,KAAP;AACD;AAbY,C","sourcesContent":["const sampleData = {\n  region: {\n    name: 'Africa',\n    avgAge: 19.7,\n    avgDailyIncomeInUSD: 5,\n    avgDailyIncomePopulation: 0.71\n  },\n  periodType: 'days',\n  timeToElapse: 58,\n  reportedCases: 674,\n  population: 66622705,\n  totalHospitalBeds: 1380614\n};\n\nconst compareObjectKeys = (a, b) => {\n  const aKeys = Object.keys(a).sort();\n  const bKeys = Object.keys(b).sort();\n  return JSON.stringify(aKeys) === JSON.stringify(bKeys);\n};\n\nconst compareObjectKeysValueTypes = (a, b) => {\n  const aValues = Object.values(a).sort();\n  const bValues = Object.values(b).sort();\n\n  let aTypes = '';\n  let bTypes = '';\n\n  aValues.forEach((value) => {\n    aTypes = aTypes.concat(typeof value);\n  });\n  bValues.forEach((value) => {\n    bTypes = bTypes.concat(typeof value);\n  });\n  return aTypes === bTypes;\n};\n\nconst validateTypesForValues = (data, sample) => compareObjectKeysValueTypes(data, sample);\n\n\nexport default {\n  validateInput: (data) => {\n    const equalKeys = compareObjectKeys(data, sampleData);\n    const valueTypesValid = validateTypesForValues(data, sampleData);\n    const regionValueTypesValid = validateTypesForValues(data.region, sampleData.region);\n\n    if (!equalKeys) {\n      return { succes: false, message: 'Invalid Inputs Provided' };\n    } if (!(valueTypesValid && regionValueTypesValid)) {\n      return { succes: false, message: 'Invalid data types provided' };\n    }\n\n    return { succes: equalKeys && valueTypesValid };\n  }\n};\n"],"file":"appUtilities.js"}