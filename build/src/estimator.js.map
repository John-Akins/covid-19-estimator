{"version":3,"sources":["../../src/estimator.js"],"names":["InfectionRateByRequestedTime","currentlyInfected","periodType","timeToElapse","days","EstimateBestCase","data","reportedCases","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","totalHospitalBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","avgDailyIncomeInUSD","EstimateSevereCase","covid19ImpactEstimator","impact","severeImpact"],"mappings":";;;;;;;AAAA,MAAMA,4BAA4B,GAAG,CAACC,iBAAD,EAAoBC,UAApB,EAAgCC,YAAhC,KAAiD;AACpF,MAAIC,IAAI,GAAG,CAAX;;AACA,UAAQF,UAAR;AACE,SAAK,MAAL;AACEE,MAAAA,IAAI,GAAG,IAAID,YAAX;AACA;;AACF,SAAK,OAAL;AACEC,MAAAA,IAAI,GAAG,IAAID,YAAX;AACA;;AACF,SAAK,QAAL;AACEC,MAAAA,IAAI,GAAG,KAAKD,YAAZ;AACA;;AACF;AACEC,MAAAA,IAAI,GAAG,EAAP;AACA;AAZJ;;AAcA,SAAQH,iBAAiB,GAAG,IAApB,GAA2BG,IAA5B,GAAoC,EAA3C;AACD,CAjBD;;AAmBA,MAAMC,gBAAgB,GAAIC,IAAD,IAAU;AACjC,QAAML,iBAAiB,GAAGK,IAAI,CAACC,aAAL,GAAqB,EAA/C;AACA,QAAMC,yBAAyB,GAAGR,4BAA4B,CAACC,iBAAD,EAC5DK,IAAI,CAACJ,UADuD,EAC3CI,IAAI,CAACH,YADsC,CAA9D;AAEA,QAAMM,0BAA0B,GAAGT,4BAA4B,IAAI,KAAK,GAAT,CAA/D;AACA,QAAMU,2BAA2B,GAAGJ,IAAI,CAACK,iBAAL,IAA0B,KAAK,GAA/B,CAApC;AACA,QAAMC,0BAA0B,GAAGJ,yBAAyB,IAAI,IAAI,GAAR,CAA5D;AACA,QAAMK,kCAAkC,GAAGL,yBAAyB,IAAI,IAAI,GAAR,CAApE;AACA,QAAMM,eAAe,GACnBN,yBAAyB,GAAG,IADN,GACcF,IAAI,CAACS,mBADnB,GACyCT,IAAI,CAACH,YADtE;AAGA,SAAO;AACLF,IAAAA,iBADK;AAELO,IAAAA,yBAFK;AAGLC,IAAAA,0BAHK;AAILC,IAAAA,2BAJK;AAKLE,IAAAA,0BALK;AAMLC,IAAAA,kCANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CApBD;;AAsBA,MAAME,kBAAkB,GAAIV,IAAD,IAAU;AACnC,QAAML,iBAAiB,GAAGK,IAAI,CAACC,aAAL,GAAqB,EAA/C;AACA,QAAMC,yBAAyB,GAAGR,4BAA4B,CAACC,iBAAD,EAC5DK,IAAI,CAACJ,UADuD,EAC3CI,IAAI,CAACH,YADsC,CAA9D;AAEA,QAAMM,0BAA0B,GAAGT,4BAA4B,IAAI,KAAK,GAAT,CAA/D;AACA,QAAMU,2BAA2B,GAAGJ,IAAI,CAACK,iBAAL,IAA0B,KAAK,GAA/B,CAApC;AACA,QAAMC,0BAA0B,GAAGJ,yBAAyB,IAAI,IAAI,GAAR,CAA5D;AACA,QAAMK,kCAAkC,GAAGL,yBAAyB,IAAI,IAAI,GAAR,CAApE;AACA,QAAMM,eAAe,GACnBN,yBAAyB,GAAG,IADN,GACcF,IAAI,CAACS,mBADnB,GACyCT,IAAI,CAACH,YADtE;AAGA,SAAO;AACLF,IAAAA,iBADK;AAELO,IAAAA,yBAFK;AAGLC,IAAAA,0BAHK;AAILC,IAAAA,2BAJK;AAKLE,IAAAA,0BALK;AAMLC,IAAAA,kCANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CApBD;;AAsBA,MAAMG,sBAAsB,GAAIX,IAAD,KAAW;AACxCA,EAAAA,IADwC;AAExCY,EAAAA,MAAM,EAAEb,gBAAgB,CAACC,IAAD,CAFgB;AAGxCa,EAAAA,YAAY,EAAEH,kBAAkB,CAACV,IAAD;AAHQ,CAAX,CAA/B;;eAMeW,sB","sourcesContent":["const InfectionRateByRequestedTime = (currentlyInfected, periodType, timeToElapse) => {\n  let days = 0;\n  switch (periodType) {\n    case 'days':\n      days = 1 * timeToElapse;\n      break;\n    case 'weeks':\n      days = 7 * timeToElapse;\n      break;\n    case 'months':\n      days = 30 * timeToElapse;\n      break;\n    default:\n      days = 30;\n      break;\n  }\n  return (currentlyInfected * 1024 * days) / 30;\n};\n\nconst EstimateBestCase = (data) => {\n  const currentlyInfected = data.reportedCases * 10;\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected,\n    data.periodType, data.timeToElapse);\n  const severeCasesByRequestedTime = InfectionRateByRequestedTime * (15 / 100);\n  const hospitalBedsByRequestedTime = data.totalHospitalBeds * (35 / 100);\n  const casesForICUByRequestedTime = infectionsByRequestedTime * (5 / 100);\n  const casesForVentilatorsByRequestedTime = infectionsByRequestedTime * (2 / 100);\n  const dollarsInFlight = (\n    infectionsByRequestedTime * 0.65) * data.avgDailyIncomeInUSD * data.timeToElapse;\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst EstimateSevereCase = (data) => {\n  const currentlyInfected = data.reportedCases * 50;\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected,\n    data.periodType, data.timeToElapse);\n  const severeCasesByRequestedTime = InfectionRateByRequestedTime * (15 / 100);\n  const hospitalBedsByRequestedTime = data.totalHospitalBeds * (35 / 100);\n  const casesForICUByRequestedTime = infectionsByRequestedTime * (5 / 100);\n  const casesForVentilatorsByRequestedTime = infectionsByRequestedTime * (2 / 100);\n  const dollarsInFlight = (\n    infectionsByRequestedTime * 0.65) * data.avgDailyIncomeInUSD * data.timeToElapse;\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst covid19ImpactEstimator = (data) => ({\n  data,\n  impact: EstimateBestCase(data),\n  severeImpact: EstimateSevereCase(data)\n});\n\nexport default covid19ImpactEstimator;\n"],"file":"estimator.js"}