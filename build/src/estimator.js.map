{"version":3,"sources":["../../src/estimator.js"],"names":["getElapsedDays","periodType","timeToElapse","days","getDailyIncome","avgDailyIncome","avgDailyIncomePopulation","InfectionRateByRequestedTime","currentlyInfected","factor","Math","trunc","EstimateBestCase","data","reportedCases","totalHospitalBeds","avgDailyIncomeInUSD","region","elapsedDays","dailyIncome","vacantHospitalBeds","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","EstimateSevereCase","covid19ImpactEstimator","impact","severeImpact"],"mappings":"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","file":"estimator.js","sourcesContent":["const getElapsedDays = (periodType, timeToElapse) => {\n  let days = 0;\n  switch (periodType) {\n    case 'days':\n      days = timeToElapse;\n      break;\n    case 'weeks':\n      days = 7 * timeToElapse;\n      break;\n    case 'months':\n      days = 30 * timeToElapse;\n      break;\n    default:\n      days = 30;\n      break;\n  }\n  return days;\n};\n\nconst getDailyIncome = (avgDailyIncome, avgDailyIncomePopulation, days) => (avgDailyIncome\n  * avgDailyIncomePopulation) / days;\n\nconst InfectionRateByRequestedTime = (currentlyInfected, days) => {\n  const factor = 2 ** Math.trunc(days / 3);\n  return Math.trunc(currentlyInfected * factor);\n};\n\nconst EstimateBestCase = (data) => {\n  const {\n    periodType,\n    timeToElapse,\n    reportedCases,\n    totalHospitalBeds\n  } = data;\n\n  const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = data.region;\n\n  const elapsedDays = getElapsedDays(periodType, timeToElapse);\n  const dailyIncome = getDailyIncome(avgDailyIncomeInUSD, avgDailyIncomePopulation, elapsedDays);\n  const vacantHospitalBeds = totalHospitalBeds * 0.35;\n\n  const currentlyInfected = Math.trunc(reportedCases * 10);\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected, elapsedDays);\n  const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * (15 / 100));\n  const hospitalBedsByRequestedTime = Math.trunc(vacantHospitalBeds - severeCasesByRequestedTime);\n  const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * (5 / 100));\n  const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * (2 / 100));\n  const dollarsInFlight = Math.trunc(dailyIncome * infectionsByRequestedTime);\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst EstimateSevereCase = (data) => {\n  const {\n    periodType,\n    timeToElapse,\n    reportedCases,\n    totalHospitalBeds\n  } = data;\n\n  const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = data.region;\n\n  const elapsedDays = getElapsedDays(periodType, timeToElapse);\n  const dailyIncome = getDailyIncome(avgDailyIncomeInUSD, avgDailyIncomePopulation, elapsedDays);\n  const vacantHospitalBeds = totalHospitalBeds * 0.35;\n\n  const currentlyInfected = Math.trunc(reportedCases * 50);\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected, elapsedDays);\n  const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * (15 / 100));\n  const hospitalBedsByRequestedTime = Math.trunc(vacantHospitalBeds - severeCasesByRequestedTime);\n  const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * (5 / 100));\n  const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * (2 / 100));\n  const dollarsInFlight = Math.trunc(dailyIncome * infectionsByRequestedTime);\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst covid19ImpactEstimator = (data) => ({\n  data,\n  impact: EstimateBestCase(data),\n  severeImpact: EstimateSevereCase(data)\n});\n\nexport default covid19ImpactEstimator;\n"]}