{"version":3,"sources":["../../src/estimator.js"],"names":["getElapsedDays","periodType","timeToElapse","days","getDailyIncome","avgDailyIncome","avgDailyIncomePopulation","InfectionRateByRequestedTime","currentlyInfected","factor","Math","trunc","EstimateBestCase","data","reportedCases","totalHospitalBeds","avgDailyIncomeInUSD","region","elapsedDays","dailyIncome","vacantHospitalBeds","infectionsByRequestedTime","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","dollarsInFlight","EstimateSevereCase","covid19ImpactEstimator","impact","severeImpact"],"mappings":"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","sourcesContent":["const getElapsedDays = (periodType, timeToElapse) => {\n  let days = 0;\n  switch (periodType) {\n    case 'days':\n      days = timeToElapse;\n      break;\n    case 'weeks':\n      days = 7 * timeToElapse;\n      break;\n    case 'months':\n      days = 30 * timeToElapse;\n      break;\n    default:\n      days = 30;\n      break;\n  }\n  return days;\n};\n\nconst getDailyIncome = (avgDailyIncome, avgDailyIncomePopulation, days) => (avgDailyIncome\n  * avgDailyIncomePopulation) / days;\n\nconst InfectionRateByRequestedTime = (currentlyInfected, days) => {\n  const factor = 2 ** Math.trunc(days / 3);\n  return Math.trunc(currentlyInfected * factor);\n};\n\nconst EstimateBestCase = (data) => {\n  const {\n    periodType,\n    timeToElapse,\n    reportedCases,\n    totalHospitalBeds\n  } = data;\n\n  const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = data.region;\n\n  const elapsedDays = getElapsedDays(periodType, timeToElapse);\n  const dailyIncome = getDailyIncome(avgDailyIncomeInUSD, avgDailyIncomePopulation, elapsedDays);\n  const vacantHospitalBeds = totalHospitalBeds * 0.35;\n\n  const currentlyInfected = Math.trunc(reportedCases * 10);\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected, elapsedDays);\n  const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * (15 / 100));\n  const hospitalBedsByRequestedTime = Math.trunc(vacantHospitalBeds - severeCasesByRequestedTime);\n  const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * (5 / 100));\n  const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * (2 / 100));\n  const dollarsInFlight = Math.trunc(dailyIncome * infectionsByRequestedTime);\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst EstimateSevereCase = (data) => {\n  const {\n    periodType,\n    timeToElapse,\n    reportedCases,\n    totalHospitalBeds\n  } = data;\n\n  const { avgDailyIncomeInUSD, avgDailyIncomePopulation } = data.region;\n\n  const elapsedDays = getElapsedDays(periodType, timeToElapse);\n  const dailyIncome = getDailyIncome(avgDailyIncomeInUSD, avgDailyIncomePopulation, elapsedDays);\n  const vacantHospitalBeds = totalHospitalBeds * 0.35;\n\n  const currentlyInfected = Math.trunc(reportedCases * 50);\n  const infectionsByRequestedTime = InfectionRateByRequestedTime(currentlyInfected, elapsedDays);\n  const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * (15 / 100));\n  const hospitalBedsByRequestedTime = Math.trunc(vacantHospitalBeds - severeCasesByRequestedTime);\n  const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * (5 / 100));\n  const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * (2 / 100));\n  const dollarsInFlight = Math.trunc(dailyIncome * infectionsByRequestedTime);\n\n  return {\n    currentlyInfected,\n    infectionsByRequestedTime,\n    severeCasesByRequestedTime,\n    hospitalBedsByRequestedTime,\n    casesForICUByRequestedTime,\n    casesForVentilatorsByRequestedTime,\n    dollarsInFlight\n  };\n};\n\nconst covid19ImpactEstimator = (data) => ({\n  data,\n  impact: EstimateBestCase(data),\n  severeImpact: EstimateSevereCase(data)\n});\n\nexport default covid19ImpactEstimator;\n"],"file":"estimator.js"}