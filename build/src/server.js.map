{"version":3,"sources":["../../src/server.js"],"names":["config","normalizePort","val","port","parseInt","isNaN","process","env","PORT","app","set","server","http","createServer","errorHandler","error","syscall","address","bind","code","exit","on","console","log","listen"],"mappings":";;AAAA;;AACA;;AACA;;;;AAFyB;AAIzBA,gBAAOA,MAAP,G,CAEA;AACA;;;AACA,MAAMC,aAAa,GAAIC,GAAD,IAAS;AAC7B,QAAMC,IAAI,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAArB,CAD6B,CAG7B;;AACA,MAAIG,KAAK,CAACF,IAAD,CAAT,EAAiB;AACf,WAAOD,GAAP;AACD;;AACD,MAAIC,IAAI,IAAI,CAAZ,EAAe;AACb,WAAOA,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAXD;;AAaA,MAAMA,IAAI,GAAGF,aAAa,CAACK,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;;AAEAC,aAAIC,GAAJ,CAAQ,MAAR,EAAgBP,IAAhB;;AAEA,MAAMQ,MAAM,GAAGC,cAAKC,YAAL,CAAkBJ,YAAlB,CAAf,C,CAEA;AACA;;;AACA,MAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9B,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AACD,QAAME,OAAO,GAAGN,MAAM,CAACM,OAAP,EAAhB;AACA,QAAMC,IAAI,GAAG,OAAOD,OAAP,KAAmB,QAAnB,GAA+B,QAAOA,OAAQ,EAA9C,GAAmD,SAAQd,IAAK,EAA7E;;AACA,UAAQY,KAAK,CAACI,IAAd;AACE,SAAK,QAAL;AACJ;AACMb,MAAAA,OAAO,CAACc,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACJ;AACMd,MAAAA,OAAO,CAACc,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAML,KAAN;AAVJ;AAYD,CAlBD;;AAoBAJ,MAAM,CAACU,EAAP,CAAU,OAAV,EAAmBP,YAAnB;AACAH,MAAM,CAACU,EAAP,CAAU,WAAV,EAAuB,MAAM;AAC3B,QAAMJ,OAAO,GAAGN,MAAM,CAACM,OAAP,EAAhB;AACA,QAAMC,IAAI,GAAG,OAAOD,OAAP,KAAmB,QAAnB,GAA+B,QAAOA,OAAQ,EAA9C,GAAmD,QAAOd,IAAK,EAA5E;AACAmB,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeL,IAAK,EAAjC;AACD,CALD,E,CAOA;;AACAP,MAAM,CAACa,MAAP,CAAcrB,IAAd","sourcesContent":["import http from 'http'; // import Node native http package\nimport config from 'dotenv';\nimport app from './app';\n\nconfig.config();\n\n// returns a valid port\n// whether port is passed as number or a string\nconst normalizePort = (val) => {\n  const port = parseInt(val, 10);\n\n  // eslint-disable-next-line no-restricted-globals\n  if (isNaN(port)) {\n    return val;\n  }\n  if (port >= 0) {\n    return port;\n  }\n  return false;\n};\n\nconst port = normalizePort(process.env.PORT || '8080');\n\napp.set('port', port);\n\nconst server = http.createServer(app);\n\n// checks for various errors and handles them appropriately,\n// also registers them to the server\nconst errorHandler = (error) => {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n  const address = server.address();\n  const bind = typeof address === 'string' ? `pipe ${address}` : `port: ${port}`;\n  switch (error.code) {\n    case 'EACCES':\n//      console.error(`${bind}requires elevated priviledges.`);\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n//      console.error(`${bind}is already in use.`);\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n};\n\nserver.on('error', errorHandler);\nserver.on('listening', () => {\n  const address = server.address();\n  const bind = typeof address === 'string' ? `pipe ${address}` : `port ${port}`;\n  console.log(address);\n  console.log(`Listening on ${bind}`);\n});\n\n// set server to listen with either production or local port\nserver.listen(port);\n"],"file":"server.js"}