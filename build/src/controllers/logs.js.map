{"version":3,"sources":["../../../src/controllers/logs.js"],"names":["responseUtility","db","logsController","logToText","data","textLog","forEach","log","timestamp","url","duration","getLoggedRequests","req","res","query","then","logText","rows","success","catch","error","logNewRequest","requestTime","baseUrl","Date","now","text","values"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,8BAA5B;AACA,OAAOC,EAAP,MAAe,OAAf;;AAEA,MAAMC,iBAAiB,EAAvB;;AAEA,MAAMC,YAAaC,IAAD,IAAU;AAC1B,MAAIC,UAAU,EAAd;AACAD,OAAKE,OAAL,CAAcC,GAAD,IAAS;AACpBF,eAAY,IAAGE,IAAIC,SAAU,IAAGD,IAAIE,GAAI,IAAGF,IAAIG,QAAS,MAAxD;AACD,GAFD;AAGA,SAAOL,OAAP;AACD,CAND;;AAQAH,eAAeS,iBAAf,GAAmC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/CZ,KAAGa,KAAH,CAAS,oBAAT,EACGC,IADH,CACSX,IAAD,IAAU;AACd,UAAMY,UAAUb,UAAUC,KAAKa,IAAf,CAAhB;AACAjB,oBAAgBkB,OAAhB,CAAwBL,GAAxB,EAA6BG,OAA7B;AACD,GAJH,EAKGG,KALH,CAKS,MAAM;AACXnB,oBAAgBoB,KAAhB,CAAsBP,GAAtB,EAA2B,GAA3B,EAAgC,mDAAhC;AACD,GAPH;AAQD,CATD;;AAWAX,eAAemB,aAAf,GAAgCT,GAAD,IAAS;AACtC,QAAM,EAAEU,WAAF,EAAeC,OAAf,KAA2BX,GAAjC;AACA,QAAMF,WAAW,CAACc,KAAKC,GAAL,KAAaH,WAAd,IAA6B,IAA9C;;AAEA,QAAMR,QAAQ;AACZY,UAAM,wEADM;AAEZC,YAAQ,CAACL,WAAD,EAAcC,OAAd,EAAuBb,QAAvB;AAFI,GAAd;;AAKAT,KAAGa,KAAH,CAASA,KAAT,EACGC,IADH,CACQ,MAAM,IADd,EAEGI,KAFH,CAES,MAAM,KAFf;AAGD,CAZD;;AAcA,eAAejB,cAAf","file":"logs.js","sourcesContent":["import responseUtility from '../utilities/responseUtility';\nimport db from '../db';\n\nconst logsController = {};\n\nconst logToText = (data) => {\n  let textLog = '';\n  data.forEach((log) => {\n    textLog += ` ${log.timestamp} ${log.url} ${log.duration}  \\n`;\n  });\n  return textLog;\n};\n\nlogsController.getLoggedRequests = (req, res) => {\n  db.query('SELECT * FROM logs')\n    .then((data) => {\n      const logText = logToText(data.rows);\n      responseUtility.success(res, logText);\n    })\n    .catch(() => {\n      responseUtility.error(res, 400, 'someting went wrong while processing your request');\n    });\n};\n\nlogsController.logNewRequest = (req) => {\n  const { requestTime, baseUrl } = req;\n  const duration = (Date.now() - requestTime) / 1000;\n\n  const query = {\n    text: 'INSERT INTO logs (\"timestamp\", \"url\", \"duration\") values  ($1, $2, $3)',\n    values: [requestTime, baseUrl, duration]\n  };\n\n  db.query(query)\n    .then(() => true)\n    .catch(() => false);\n};\n\nexport default logsController;\n"]}