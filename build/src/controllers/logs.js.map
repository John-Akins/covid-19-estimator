{"version":3,"sources":["../../../src/controllers/logs.js"],"names":["logsController","logToText","data","textLog","forEach","log","timestamp","url","duration","getLoggedRequests","req","res","db","query","then","logText","rows","responseUtility","success","catch","error","logNewRequest","requestTime","baseUrl","Date","now","text","values"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,EAAvB;;AAEA,MAAMC,SAAS,GAAIC,IAAD,IAAU;AAC1B,MAAIC,OAAO,GAAG,EAAd;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;AACpBF,IAAAA,OAAO,IAAK,IAAGE,GAAG,CAACC,SAAU,IAAGD,GAAG,CAACE,GAAI,IAAGF,GAAG,CAACG,QAAS,MAAxD;AACD,GAFD;AAGA,SAAOL,OAAP;AACD,CAND;;AAQAH,cAAc,CAACS,iBAAf,GAAmC,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/CC,cAAGC,KAAH,CAAS,oBAAT,EACGC,IADH,CACSZ,IAAD,IAAU;AACd,UAAMa,OAAO,GAAGd,SAAS,CAACC,IAAI,CAACc,IAAN,CAAzB;;AACAC,6BAAgBC,OAAhB,CAAwBP,GAAxB,EAA6BI,OAA7B;AACD,GAJH,EAKGI,KALH,CAKS,MAAM;AACXF,6BAAgBG,KAAhB,CAAsBT,GAAtB,EAA2B,GAA3B,EAAgC,mDAAhC;AACD,GAPH;AAQD,CATD;;AAWAX,cAAc,CAACqB,aAAf,GAAgCX,GAAD,IAAS;AACtC,QAAM;AAAEY,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA2Bb,GAAjC;AACA,QAAMF,QAAQ,GAAG,CAACgB,IAAI,CAACC,GAAL,KAAaH,WAAd,IAA6B,IAA9C;AAEA,QAAMT,KAAK,GAAG;AACZa,IAAAA,IAAI,EAAE,wEADM;AAEZC,IAAAA,MAAM,EAAE,CAACL,WAAD,EAAcC,OAAd,EAAuBf,QAAvB;AAFI,GAAd;;AAKAI,cAAGC,KAAH,CAASA,KAAT,EACGC,IADH,CACQ,MAAM,IADd,EAEGK,KAFH,CAES,MAAM,KAFf;AAGD,CAZD;;eAcenB,c","sourcesContent":["import responseUtility from '../utilities/responseUtility';\nimport db from '../db';\n\nconst logsController = {};\n\nconst logToText = (data) => {\n  let textLog = '';\n  data.forEach((log) => {\n    textLog += ` ${log.timestamp} ${log.url} ${log.duration}  \\n`;\n  });\n  return textLog;\n};\n\nlogsController.getLoggedRequests = (req, res) => {\n  db.query('SELECT * FROM logs')\n    .then((data) => {\n      const logText = logToText(data.rows);\n      responseUtility.success(res, logText);\n    })\n    .catch(() => {\n      responseUtility.error(res, 400, 'someting went wrong while processing your request');\n    });\n};\n\nlogsController.logNewRequest = (req) => {\n  const { requestTime, baseUrl } = req;\n  const duration = (Date.now() - requestTime) / 1000;\n\n  const query = {\n    text: 'INSERT INTO logs (\"timestamp\", \"url\", \"duration\") values  ($1, $2, $3)',\n    values: [requestTime, baseUrl, duration]\n  };\n\n  db.query(query)\n    .then(() => true)\n    .catch(() => false);\n};\n\nexport default logsController;\n"],"file":"logs.js"}